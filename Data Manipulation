Question - 1
------------
const input = [
  { id: 1, type: 'fruit', name: 'apple' },
  { id: 2, type: 'vegetable', name: 'carrot' },
  { id: 3, type: 'fruit', name: 'banana' },
  { id: 4, type: 'vegetable', name: 'lettuce' }
];

console.log(groupBy(input, 'type'));

// Output:
// {
//   fruit: [
//     { id: 1, type: 'fruit', name: 'apple' },
//     { id: 3, type: 'fruit', name: 'banana' }
//   ],
//   vegetable: [
//     { id: 2, type: 'vegetable', name: 'carrot' },
//     { id: 4, type: 'vegetable', name: 'lettuce' }
//   ]
// }

function groupBy(input, key){
	let ans = {};
  input.forEach(item => {
  	if(ans[item[key]]){
    	ans[item[key]].push(item);
    }else{
    	ans[item[key]] = [item];
    }
  });
  return ans;
}



Question - 2
---------
const students = [
  { id: 1, name: 'Alice', grade: 'A' },
  { id: 2, name: 'Bob', grade: 'B' },
  { id: 3, name: 'Charlie', grade: 'A' },
  { id: 4, name: 'David', grade: 'C' },
  { id: 5, name: 'Eve', grade: 'C' },
];

console.log(groupStudentsByGrade(students));

// Output:
// {
//   A: [
//     { id: 1, name: 'Alice', grade: 'A' },
//     { id: 3, name: 'Charlie', grade: 'A' }
//   ],
//   B: [
//     { id: 2, name: 'Bob', grade: 'B' },
//     { id: 5, name: 'Eve', grade: 'B' }
//   ],
//   C: [
//     { id: 4, name: 'David', grade: 'C' }
//   ]
// }

function groupStudentsByGrade(students){
	let ans={};
  students.forEach(student => {
  	if(ans[student["grade"]]){
    	ans[student["grade"]].push(student);
    }else{
    	ans[student["grade"]] = [student];
    }
  });
  return ans;
}



Question - 3
-------------
const products = [
  { id: 1, name: 'Laptop', price: 1500 },
  { id: 2, name: 'Phone', price: 700 },
  { id: 3, name: 'Tablet', price: 300 },
  { id: 4, name: 'Monitor', price: 200 }
];

console.log(filterExpensiveProducts(products, 500));

// Output: 
// [
//   { id: 1, name: 'Laptop', price: 1500 },
//   { id: 2, name: 'Phone', price: 700 }
// ]

function filterExpensiveProducts(products, price){
	return products.filter(product => product.price > price)
}


Question - 4
---------
const students = [
  { id: 1, name: 'Alice', score: 85 },
  { id: 2, name: 'Bob', score: 92 },
  { id: 3, name: 'Charlie', score: 78 },
  { id: 4, name: 'David', score: 90 }
];

console.log(sortStudentsByScore(students));

// Output:
// [
//   { id: 2, name: 'Bob', score: 92 },
//   { id: 4, name: 'David', score: 90 },
//   { id: 1, name: 'Alice', score: 85 },
//   { id: 3, name: 'Charlie', score: 78 }
// ]

function sortStudentsByScore(students){
	students.sort((a,b) => (b.score - a.score));
  return students;
}


Question - 5
-------
const users = [
  { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com' },
  { firstName: 'Jane', lastName: 'Smith', email: 'jane.smith@example.com' },
  { firstName: 'Emily', lastName: 'Jones', email: 'emily.jones@example.com' }
];

console.log(getUserFullNames(users));

// Output:
// [
//   { fullName: 'John Doe', email: 'john.doe@example.com' },
//   { fullName: 'Jane Smith', email: 'jane.smith@example.com' },
//   { fullName: 'Emily Jones', email: 'emily.jones@example.com' }
// ]

function getUserFullNames(users){
	return users.map(user => ({
  	fullName: user.firstName + ' ' + user.lastName,
    email: user.email
  }))
}


Question - 6
----------

const users = [
  { userId: 1, name: 'Alice' },
  { userId: 2, name: 'Bob' },
  { userId: 3, name: 'Charlie' }
];

const orders = [
  { orderId: 101, userId: 1, product: 'Laptop' },
  { orderId: 102, userId: 2, product: 'Phone' },
  { orderId: 103, userId: 3, product: 'Tablet' },
  { orderId: 104, userId: 1, product: 'Monitor' }
];

console.log(mergeUserOrders(users, orders));

// Output:
// [
//   { userId: 1, name: 'Alice', orders: [ { orderId: 101, product: 'Laptop' }, { orderId: 104, product: 'Monitor' } ] },
//   { userId: 2, name: 'Bob', orders: [ { orderId: 102, product: 'Phone' } ] },
//   { userId: 3, name: 'Charlie', orders: [ { orderId: 103, product: 'Tablet' } ] }
// ]


function mergeUserOrders(users, orders){
  let ordersById = {};
  orders.forEach(order => {
    let id = order["userId"]
    delete order["userId"];
    
    if(ordersById[id]){
    	ordersById[id].push(order);
    }else{
    	ordersById[id] = [order];
    }
  });
  
  return users.map(user => ({
  	...user,
    orders: [...(ordersById[user.userId] || [])],
  }));
};





Question - 7
---------

const transactions = [
  { id: 1, amount: 100, type: 'income' },
  { id: 2, amount: 50, type: 'expense' },
  { id: 3, amount: 150, type: 'income' },
  { id: 4, amount: 200, type: 'income' },
  { id: 5, amount: 75, type: 'expense' }
];

console.log(summarizeTransactions(transactions));

// Output:
// {
//   income: 450,
//   expense: 125
// }

function summarizeTransactions(transactions){
	return transactions.reduce((acc, transaction)=>{
  	acc[transaction["type"]] += transaction["amount"];
    return acc;
  }, {income: 0, expense: 0})
}


Question - 8
----------

const products = [
  { id: 1, name: 'Laptop', price: 1500 },
  { id: 2, name: 'Phone', price: 700 },
  { id: 3, name: 'Tablet', price: 300 },
  { id: 4, name: 'Monitor', price: 200 }
];

console.log(findMostExpensiveProduct(products));

// Output:
// { id: 1, name: 'Laptop', price: 1500 }

function findMostExpensiveProduct(products){
	return products.reduce((ans, product)=>{
  	return ans.price > product.price ? ans : product;
  })
}


Question - 9
--------

const students = [
  { id: 1, name: 'Alice', score: 85 },
  { id: 2, name: 'Bob', score: 92 },
  { id: 3, name: 'Charlie', score: 78 },
  { id: 4, name: 'David', score: 90 }
];

console.log(calculateAverageScore(students));

// Output:
// 86.25

function calculateAverageScore(students){
	const sum = students.reduce((sum, student)=>{
  	return sum+student.score;
  },0)
  
  return sum/students.length;
}


Question - 10
-------

const input = [1,[2],[3,[4,[5]]];
console.log(flattenArray(input)); // Output: [1, 2, 3, 4, 5]

function flattenArray(input){
let ans = [];
 input.forEach(ele => {
 	if(Array.isArray(ele)){
  	ans = [...ans, ...flattenArray(ele)];
  }else{
  	ans.push(ele);
  }
 });
  return ans;
}

Question - 11
-------

const items = [
  { id: 1, value: 'a' },
  { id: 2, value: 'b' },
  { id: 1, value: 'c' },
  { id: 3, value: 'd' },
  { id: 2, value: 'e' }
];

console.log(removeDuplicates(items));

// Output:
// [ { id: 1, value: 'a' }, { id: 2, value: 'b' }, { id: 3, value: 'd' } ]

function removeDuplicates(items){
	let uniqueIds = new Set();
	return items.filter(item => {
  	if(uniqueIds.has(item.id)) return false;
    uniqueIds.add(item.id);
    return true
  })
};


Question - 12
----

const items = [
  { id: 1, tag: 'javascript' },
  { id: 2, tag: 'programming' },
  { id: 3, tag: 'javascript' },
  { id: 4, tag: 'web' }
];

console.log(findUniqueTags(items));

// Output:
// [ 'javascript', 'programming', 'web' ]

function findUniqueTags(items){
	let uniqueTags = new Set();
  items.forEach(item => {
  	uniqueTags.add(item.tag);
  });
  return Array.from(uniqueTags);
};

Question - 13
-----

const transactions = [
  { id: 1, amount: 100, category: 'food' },
  { id: 2, amount: 200, category: 'clothing' },
  { id: 3, amount: 50, category: 'food' },
  { id: 4, amount: 150, category: 'entertainment' }
];

console.log(summarizeByCategory(transactions));

// Output:
// {
//   food: 150,
//   clothing: 200,
//   entertainment: 150
// }

function summarizeByCategory(transactions){
	let ans = {};
  transactions.forEach(transaction => {
  	if(!ans[transaction["category"]]) ans[transaction["category"]] = 0;
    ans[transaction["category"]] += transaction["amount"]
  });
  return ans;
};


Question - 14
-----------

const employees = [
  { id: 1, name: 'Alice', projects: [{ projectId: 1, projectName: 'Project A' }, { projectId: 2, projectName: 'Project B' }] },
  { id: 2, name: 'Bob', projects: [{ projectId: 3, projectName: 'Project C' }] }
];

console.log(flattenEmployeeProjects(employees));

// Output:
// [
//   { employeeName: 'Alice', projectId: 1, projectName: 'Project A' },
//   { employeeName: 'Alice', projectId: 2, projectName: 'Project B' },
//   { employeeName: 'Bob', projectId: 3, projectName: 'Project C' }
// ]

function flattenEmployeeProjects(employees){
	let ans = [];
  
  employees.forEach(employee => {
  	employee.projects.forEach(project => {
    	ans.push({...project, employeeName: employee.name});
    })
  });
  
  return ans;
}

Question - 15
-------------

const users = [
  { userId: 1, name: 'Alice' },
  { userId: 2, name: 'Bob' },
  { userId: 3, name: 'Charlie' }
];

const roles = [
  { userId: 1, role: 'admin' },
  { userId: 2, role: 'user' },
  { userId: 3, role: 'guest' }
];

console.log(combineUserData(users, roles));

// Output:
// [
//   { userId: 1, name: 'Alice', role: 'admin' },
//   { userId: 2, name: 'Bob', role: 'user' },
//   { userId: 3, name: 'Charlie', role: 'guest' }
// ]

function combineUserData(users, roles){
	let rolesById = {}, ans = [];
  roles.forEach(role => {
    rolesById[role["userId"]] = role;
  })
  
  return users.map(user => {
  	let role = rolesById[user["userId"]];
    delete role["userId"];
    return {...user, ...role};
  })
};



Question - 16
--------

const ordersSystemA = [
  { orderId: 1, product: 'Laptop' },
  { orderId: 2, product: 'Phone' },
  { orderId: 3, product: 'Tablet' }
];

const ordersSystemB = [
  { orderId: 2, product: 'Phone' },
  { orderId: 3, product: 'Tablet' },
  { orderId: 4, product: 'Monitor' }
];

console.log(findCommonOrders(ordersSystemA, ordersSystemB));

// Output:
// [
//   { orderId: 2, product: 'Phone' },
//   { orderId: 3, product: 'Tablet' }
// ]

function findCommonOrders(ordersSystemA, ordersSystemB){
	let ordersSystemById = {};
  ordersSystemB.forEach(order => {
  	ordersSystemById[order["orderId"]] = order;
  });
  
  return ordersSystemA.filter(order => {
  	let orderB = ordersSystemById[order["orderId"]];
  	if(orderB && orderB["product"]===order["product"]){
    	return true;
    }
    return false;
  })
};
